// let m = fn(c) {
//   switch c { case 0: return NO!; };
//   puts(c);
//   return m(c-1);
// };

// ok m(10);
// ok m(12);


// ideas:
// if you enter a loop every iteration is its own goroutine.

let arr = [1,2,3];
map(arr, fn(e) { e * 2 }); // [2,4,6]

let result = map([0,1], fn(e, i) {
  switch i {
  case 0:
    return 5 * 2;
  case 1:
    return 10 * 3;
  }
})
puts(result) // [10, 30]

let every = fn(arr, check) {
  let fail = false;
  map(arr, fn(e) {
    switch check(e) { case true: fail = true; } }
  )
  return !fail;
};

result = every([5,2,4,1,3], fn(e) { return e >= 2 }) // false

puts(result) // false
